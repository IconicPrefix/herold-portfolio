@mixin box-shadow($bg-color: "transparent", $inset: "false") {

  @if $bg-color== "transparent" {
    @if $inset == "true" {
      box-shadow: inset 0px 0px 8px 2px rgba(rgba(0, 0, 0, 0), 0);
    }
    @else {
      box-shadow:0px 0px 8px 2px rgba(#00000000, 0);
    }
  } @else {
    @if $inset == "true" {
      box-shadow: inset 0px 0px 8px 2px rgba($bg-color, 0.35);
    }
    @else {
      box-shadow:0px 0px 8px 2px rgba($bg-color, 0.35);
    }
  }
}

@mixin recolor($color: #000, $opacity: 1) {
  $r: red($color) / 255;
  $g: green($color) / 255;
  $b: blue($color) / 255;
  $a: $opacity;

  // grayscale fallback if SVG from data url is not supported
  $lightness: lightness($color);
  -webkit-filter: saturate(0%) brightness(0%) invert($lightness)
    opacity($opacity);
  filter: saturate(0%) brightness(0%) invert($lightness) opacity($opacity);

  // color filter
  $svg-filter-id: "recolor";
  filter: url('data:image/svg+xml;utf8,\
  <svg xmlns="http://www.w3.org/2000/svg">\
    <filter id="#{$svg-filter-id}" color-interpolation-filters="sRGB">\
      <feColorMatrix type="matrix" values="\
        0 0 0 0 #{$r}\
        0 0 0 0 #{$g}\
        0 0 0 0 #{$b}\
        0 0 0 #{$a} 0\
      "/>\
    </filter>\
  </svg>\
  ##{$svg-filter-id}');
}
